plugins {
    id 'io.freefair.lombok' version '8.14'
    id("com.diffplug.spotless") version "7.2.1"
    id 'uk.gov.laa.springboot.laa-spring-boot-gradle-plugin' version '1.0.4'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/DataClaimsEventServiceApplication.class',
                                        '**/controller/**','**/service/TempService.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/DataClaimsEventServiceApplication.class',
                                        '**/controller/**','**/service/TempService.class'])
        }))
    }
}

dependencyManagement {
    imports {
        // Upgrade to fix vulnerabilities in netty
        mavenBom('io.netty:netty-bom:4.2.5.Final')
    }
}

dependencies {

    /**
     * Upgrades to resolve vulnerabilities
     */
    // Upgrade to fix Uncontrolled Recursion vulnerability in commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    // Upgrade to fix CVE-2025-55752, CVE-2025-55754 and CVE-2025-61795 vulnerability
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:11.0.12'
    // Upgrade to fix vulnerabilities in spring-webmvc
    implementation 'org.springframework:spring-webmvc:6.2.11'
    // Upgrade to fix vulnerabilities in spring-core
    implementation 'org.springframework:spring-core:6.2.11'
    // Upgrade to fix CVE-2025-11226 vulnerability in logback-core
    implementation 'ch.qos.logback:logback-core:1.5.19'

    implementation project(':reference-provider-details-api')
    implementation project(':reference-fee-scheme-platform-api')

    implementation 'uk.gov.justice.laa.datastewardship.payments:data-claims-api-models:e9f3d9b'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.prometheus:prometheus-metrics-tracer-initializer'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'org.springframework.data:spring-data-commons'

    // Import spring-cloud-aws BOM (Bill Of Materials) for dependency management
    implementation platform('io.awspring.cloud:spring-cloud-aws:3.4.0')
    implementation 'io.awspring.cloud:spring-cloud-aws-starter'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-sqs'
    implementation 'software.amazon.awssdk:sts:2.33.7'

    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.1'
    implementation 'org.projectlombok:lombok:1.18.38'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'

    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    implementation platform('com.fasterxml.jackson:jackson-bom:2.19.2')
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.networknt:json-schema-validator:1.5.8'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:mockserver'
    testImplementation 'org.testcontainers:localstack'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'org.mock-server:mockserver-client-java:5.15.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        cleanthat()
        googleJavaFormat()
    }
}

tasks.register("checkstyleStaged", Checkstyle) {
    group = "verification"
    description = "Runs Checkstyle on staged files only"

    def filesToCheck = project.findProperty("checkstyleFiles")
    if (filesToCheck != null) {
        source = files(filesToCheck.split(","))
    } else {
        source = sourceSets.main.allJava
    }

    classpath = sourceSets.main.compileClasspath
}

testlogger {
    theme 'mocha'
}